# THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
# BASED ON <%~ it.projectPath %>


function(add_st_target_properties TARGET_NAME)

target_compile_definitions(
    ${TARGET_NAME} PRIVATE
<% for (const definition of it.cmake.symbols) { %>
    "<%= definition %>"
<% } %>
)

target_include_directories(
    ${TARGET_NAME} PRIVATE
<% for (const include of it.cmake.includePaths) { %>
    "<%= include %>"
<% } %>
)

target_compile_options(
    ${TARGET_NAME} PRIVATE
<% for (const option of it.cmake.flags) { %>
    "<%= option %>"
<% } %>
<% for (const option of it.cmake.cpuFlags) { %>
    "<%= option %>"
<% } %>
)

target_link_libraries(
    ${TARGET_NAME} PRIVATE
<% for (const library of it.cmake.libraries) { %>
    "<%= library %>"
<% } %>
)

target_link_directories(
    ${TARGET_NAME} PRIVATE
<% for (const dir of it.cmake.libraryDirectories) { %>
    "<%= dir %>"
<% } %>
)

target_link_options(
    ${TARGET_NAME} PRIVATE
<% for (const option of it.cmake.cpuFlags) { %>
    "<%= option %>"
<% } %>
    -T
<% for (const script of it.cmake.linkerScript) { %>
    "<%= script %>"
<% } %>
)

<% if (it.cmake.debugSourceDirectories.length > 0) { %>
file(
    GLOB_RECURSE DEBUG_SOURCES CONFIGURE_DEPENDS
<% for (const source of it.cmake.debugSourceDirectories) { %>
    "<%= source %>/*"
<% } %>
)

<% } %>
<% if (it.cmake.releaseSourceDirectories.length > 0) { %>
file(
    GLOB_RECURSE RELEASE_SOURCES CONFIGURE_DEPENDS
<% for (const source of it.cmake.releaseSourceDirectories) { %>
    "<%= source %>/*"
<% } %>
)

<% } %>
<% if (it.cmake.debugSourceDirectories.length > 0) { %>
list(TRANSFORM DEBUG_SOURCES REPLACE "(.+)" "$<$<CONFIG:Debug>:\\1>")
<% } %>
<% if (it.cmake.releaseSourceDirectories.length > 0) { %>
list(TRANSFORM RELEASE_SOURCES REPLACE "(.+)" "$<$<NOT:$<CONFIG:Debug>>:\\1>")

<% } %>
target_sources(
    ${TARGET_NAME} PRIVATE
<% if (it.cmake.debugSourceDirectories.length > 0) { %>
    "${DEBUG_SOURCES}"
<% } %>
<% if (it.cmake.releaseSourceDirectories.length > 0) { %>
    "${RELEASE_SOURCES}"
<% } %>
<% for (const path of it.cmake.sourceFiles) { %>
    "<%= path %>"
<% } %>
)

add_custom_command(
    TARGET ${TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_SIZE} $<TARGET_FILE:${TARGET_NAME}>
)

add_custom_command(
    TARGET ${TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O ihex
    $<TARGET_FILE:${TARGET_NAME}> ${TARGET_NAME}.hex
)

add_custom_command(
    TARGET ${TARGET_NAME} POST_BUILD
    COMMAND ${CMAKE_OBJCOPY} -O binary
    $<TARGET_FILE:${TARGET_NAME}> ${TARGET_NAME}.bin
)

endfunction()